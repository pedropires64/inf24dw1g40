{
  "info": {
    "_postman_id": "95f02f5c-6e1f-4f8e-8258-677da2adf6a2",
    "name": "GestaoEventos-Parte3 - TESTS (Completa)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Suite completa de testes para a Parte 3: CRUD, relações, filtros e erros. API em http://localhost:3001."
  },
  "item": [
    {
      "name": "A) Sanidade",
      "item": [
        {
          "name": "GET /users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Body é array', function(){ pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /venues",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/venues",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "venues"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Body é array', function(){ pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Body é array', function(){ pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /tickets",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tickets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Body é array', function(){ pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "B) CRUD Encadeado",
      "item": [
        {
          "name": "POST /venues (create)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/venues",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "venues"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Venue QA {{timestamp}}\",\n  \"city\": \"Porto\",\n  \"capacity\": 7777\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Tem id_venue', function(){ pm.expect(pm.response.json()).to.have.property('id_venue'); });",
                  "pm.test('Tem name', function(){ pm.expect(pm.response.json()).to.have.property('name'); });",
                  "pm.test('Tem city', function(){ pm.expect(pm.response.json()).to.have.property('city'); });",
                  "",
                  "var data = pm.response.json();",
                  "pm.environment.set('venueId', _.get(data, 'id_venue'));",
                  "pm.test('Guardado venueId', function(){ pm.expect(pm.environment.get('venueId')).to.exist; });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /venues/:id",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/venues/{{venueId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "venues",
                "{{venueId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Tem id_venue', function(){ pm.expect(pm.response.json()).to.have.property('id_venue'); });",
                  "pm.test('Tem name', function(){ pm.expect(pm.response.json()).to.have.property('name'); });",
                  "pm.test('Tem city', function(){ pm.expect(pm.response.json()).to.have.property('city'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /events (create for venue)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id_venue\": \"{{venueId}}\",\n  \"name\": \"Evento QA {{timestamp}}\",\n  \"date\": \"2025-12-31 21:00:00\",\n  \"status\": \"published\",\n  \"description\": \"Teste encadeado\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Tem id_event', function(){ pm.expect(pm.response.json()).to.have.property('id_event'); });",
                  "pm.test('Tem id_venue', function(){ pm.expect(pm.response.json()).to.have.property('id_venue'); });",
                  "pm.test('Tem name', function(){ pm.expect(pm.response.json()).to.have.property('name'); });",
                  "",
                  "var data = pm.response.json();",
                  "pm.environment.set('eventId', _.get(data, 'id_event'));",
                  "pm.test('Guardado eventId', function(){ pm.expect(pm.environment.get('eventId')).to.exist; });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /venues/:id/events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/venues/{{venueId}}/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "venues",
                "{{venueId}}",
                "events"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Body é array', function(){ pm.expect(pm.response.json()).to.be.an('array'); });",
                  "",
                  "var data = pm.response.json();",
                  "if (Array.isArray(data) && data.length) { pm.environment.set('eventIdMaybe', _.get(data[0], 'id_event')); }",
                  "pm.test('Guardado eventIdMaybe (se existir)', function(){ pm.expect(true).to.be.true; });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /tickets (create for event)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tickets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id_event\": \"{{eventId}}\",\n  \"type\": \"VIP\",\n  \"price\": 55.5,\n  \"status\": \"available\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Tem id_ticket', function(){ pm.expect(pm.response.json()).to.have.property('id_ticket'); });",
                  "pm.test('Tem id_event', function(){ pm.expect(pm.response.json()).to.have.property('id_event'); });",
                  "pm.test('Tem type', function(){ pm.expect(pm.response.json()).to.have.property('type'); });",
                  "",
                  "var data = pm.response.json();",
                  "pm.environment.set('ticketId', _.get(data, 'id_ticket'));",
                  "pm.test('Guardado ticketId', function(){ pm.expect(pm.environment.get('ticketId')).to.exist; });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /events/:id/tickets",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}/tickets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                "{{eventId}}",
                "tickets"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Body é array', function(){ pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PATCH /events/:id (cancelled)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                "{{eventId}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"cancelled\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('status=cancelled', function(){ pm.expect(pm.response.json().status).to.eql('cancelled'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /tickets/:id",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tickets/{{ticketId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                "{{ticketId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 204', function () { pm.response.to.have.status(204); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /events/:id",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                "{{eventId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 204', function () { pm.response.to.have.status(204); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /venues/:id",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/venues/{{venueId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "venues",
                "{{venueId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 204', function () { pm.response.to.have.status(204); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "C) Users CRUD",
      "item": [
        {
          "name": "POST /users (create)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"QA User {{timestamp}}\",\n  \"email\": \"qa_user_{{timestamp}}@example.com\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Tem id_user', function(){ pm.expect(pm.response.json()).to.have.property('id_user'); });",
                  "pm.test('Tem email', function(){ pm.expect(pm.response.json()).to.have.property('email'); });",
                  "",
                  "var data = pm.response.json();",
                  "pm.environment.set('userId', _.get(data, 'id_user'));",
                  "pm.test('Guardado userId', function(){ pm.expect(pm.environment.get('userId')).to.exist; });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /users/:id",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "{{userId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Tem id_user', function(){ pm.expect(pm.response.json()).to.have.property('id_user'); });",
                  "pm.test('Tem name', function(){ pm.expect(pm.response.json()).to.have.property('name'); });",
                  "pm.test('Tem email', function(){ pm.expect(pm.response.json()).to.have.property('email'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PATCH /users/:id",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "{{userId}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"QA User Edited\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('nome editado', function(){ pm.expect(pm.response.json().name).to.eql('QA User Edited'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT /users/:id",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "{{userId}}"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id_user\": \"{{userId}}\",\n  \"name\": \"QA User Replaced\",\n  \"email\": \"qa_user_replaced_{{timestamp}}@example.com\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('nome replaced', function(){ pm.expect(pm.response.json().name).to.eql('QA User Replaced'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /users/:id",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "{{userId}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 204', function () { pm.response.to.have.status(204); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "D) Filtros & Relações",
      "item": [
        {
          "name": "GET /events?q=Event",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events?q=Event",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events?q=Event"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Body é array', function(){ pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /events?status=published",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events?status=published",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events?status=published"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Body é array', function(){ pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /venues/1/events",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/venues/1/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "venues",
                "1",
                "events"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Body é array', function(){ pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /events/1/tickets",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/1/tickets",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                "1",
                "tickets"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Body é array', function(){ pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /events?dateFrom&dateTo",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events?dateFrom=2025-01-01 00:00:00&dateTo=2025-12-31 23:59:59",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events?dateFrom=2025-01-01 00:00:00&dateTo=2025-12-31 23:59:59"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status 200', function () { pm.response.to.have.status(200); });",
                  "pm.test('Body é array', function(){ pm.expect(pm.response.json()).to.be.an('array'); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "E) Erros/Validação",
      "item": [
        {
          "name": "GET /tickets/999999 (deve dar 4xx)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tickets/999999",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tickets",
                "999999"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('4xx/404 esperado', function(){ pm.expect(pm.response.code).to.be.oneOf([400,404]); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /users sem email (4xx)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Sem Email\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('4xx/400 esperado', function(){ pm.expect(pm.response.code).to.be.oneOf([400,422]); });"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "pm.environment.set('timestamp', Date.now());"
        ]
      }
    }
  ]
}