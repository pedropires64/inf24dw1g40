openapi: 3.0.3
info:
  title: Parte 2 - Gest√£o de Eventos (Design-first)
  version: "1.0.0"
servers:
  - url: http://localhost:3000
paths:
  /users:
    get: { summary: List users, responses: { '200': { description: OK } } }
    post:
      summary: Create user
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
      responses: { '200': { description: Created } }
  /users/{id}:
    get:
      summary: Get user by id
      parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ]
      responses: { '200': { description: OK } }
    patch:
      summary: Update user
      parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
      responses: { '200': { description: OK } }
    delete:
      summary: Delete user
      parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ]
      responses: { '204': { description: No Content } }

  /venues:
    get: { summary: List venues, responses: { '200': { description: OK } } }
    post:
      summary: Create venue
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Venue' } } } }
      responses: { '200': { description: Created } }
  /venues/{id}:
    get: { summary: Get venue, parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
    patch:
      summary: Update venue
      parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Venue' } } } }
      responses: { '200': { description: OK } }
    delete:
      summary: Delete venue
      parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ]
      responses: { '204': { description: No Content } }
  /venues/{id}/events:
    get:
      summary: Events by venue
      parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ]
      responses: { '200': { description: OK } }

  /events:
    get:
      summary: List events (with filters)
      parameters:
        - { name: q, in: query, schema: { type: string } }
        - { name: status, in: query, schema: { type: string } }
        - { name: venueId, in: query, schema: { type: integer } }
        - { name: dateFrom, in: query, schema: { type: string, format: date-time } }
        - { name: dateTo, in: query, schema: { type: string, format: date-time } }
      responses: { '200': { description: OK } }
    post:
      summary: Create event
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } }
      responses: { '200': { description: Created } }
  /events/{id}:
    get: { summary: Get event, parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
    patch:
      summary: Update event
      parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } }
      responses: { '200': { description: OK } }
    delete:
      summary: Delete event
      parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ]
      responses: { '204': { description: No Content } }
  /events/{id}/tickets:
    get:
      summary: Tickets by event
      parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ]
      responses: { '200': { description: OK } }

  /tickets:
    get:
      summary: List tickets
      parameters:
        - { name: eventId, in: query, schema: { type: integer } }
        - { name: status, in: query, schema: { type: string } }
      responses: { '200': { description: OK } }
    post:
      summary: Create ticket
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Ticket' } } } }
      responses: { '200': { description: Created } }
  /tickets/{id}:
    get: { summary: Get ticket, parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ], responses: { '200': { description: OK } } }
    patch:
      summary: Update ticket
      parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/Ticket' } } } }
      responses: { '200': { description: OK } }
    delete:
      summary: Delete ticket
      parameters: [ { name: id, in: path, required: true, schema: { type: integer } } ]
      responses: { '204': { description: No Content } }

components:
  schemas:
    User:
      type: object
      properties:
        id_user: { type: integer }
        name: { type: string }
        email: { type: string, format: email }
    Venue:
      type: object
      properties:
        id_venue: { type: integer }
        name: { type: string }
        city: { type: string }
        capacity: { type: integer }
    Event:
      type: object
      properties:
        id_event: { type: integer }
        id_venue: { type: integer }
        name: { type: string }
        date: { type: string, format: date-time }
        status: { type: string }
        description: { type: string }
    Ticket:
      type: object
      properties:
        id_ticket: { type: integer }
        id_event: { type: integer }
        type: { type: string }
        price: { type: number, format: float }
        status: { type: string }
